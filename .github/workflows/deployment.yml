name: Deployment of Zowe Explorer and related extensions

on:
  push:
    branches:
    - master
    - test-monorepo-deployment # TODO: remove after testing is done & add the package.json path
    # paths:
    # - package.json

jobs:
  check_version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.should_publish_any.outputs.should_publish != null }}
    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v2

      - name: Get Top-Level package.json
        run: "echo ::set-output name=market_ze::$(cat package.json)"
        id: get_info

      - name: Get the Zowe Explorer package.json
        run: "echo ::set-output name=package::$(cat packages/zowe-explorer/package.json)"
        id: get_ze_package

      - name: Get the Zowe Explorer - FTP Extension package.json
        run: "echo ::set-output name=package::$(cat packages/zowe-explorer-ftp-extension/package.json)"
        id: get_ze_ftp_package

      - name: Get the Zowe Explorer - API package.json
        run: "echo ::set-output name=package::$(cat packages/zowe-explorer-api/package.json)"
        id: get_ze_api_package

      - name: Get the Zowe Explorer - ESLint Extension package.json
        run: "echo ::set-output name=package::$(cat packages/eslint-plugin-zowe-explorer/package.json)"
        id: get_ze_eslint_package

      - name: Verify that Deployment is Required
        run: "echo ::set-output name=should_publish::true"
        if: |
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_package.outputs.package).version ||
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_ftp_package.outputs.package).version ||
          fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_api_package.outputs.package).version
        # if: |
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_ftp_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_api_package.outputs.package).version ||
        #   fromJson(steps.get_info.outputs.market_ze).versions[0].version != fromJson(steps.get_ze_eslint_package.outputs.package).version
        id: should_publish_any

  deploy:
    runs-on: ubuntu-latest
    needs: check_version
    if: needs.check_version.outputs.should_publish
    steps:
      - name: Checkout the Source Code
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Configure Git
        run: |
          git config --global user.name "zowe-robot"
          git config --global user.email "zowe.robot@gmail.com"
          git remote add origin_token https://${{ secrets.ROBOT_TOKEN }}:x-oauth-basic@github.com/${{ github.repository }}.git

      - name: Install CLIs for Workflow use
        run: npm install -g vsce yarn

      # Avoid adding node_modules to each .github/actions folder
      - name: Install Internal Dependencies for Actions to Work
        run: npm install @actions/core
        working-directory: ./.github/actions/deploy-vscode-extension

      - name: Install Project Dependencies
        run: yarn

      - name: Get the Zowe Explorer Display Name
        run: "echo ::set-output name=package_nls::$(cat packages/zowe-explorer/package.nls.json)"
        id: get_ze_name

      - name: Publish the Zowe Explorer
        id: deploy_zowe_explorer
        uses: ./.github/actions/deploy-vscode-extension
        with:
          name: ${{ fromJson(steps.get_ze_name.outputs.package_nls).displayName }}
          package: packages/zowe-explorer
          token: ${{ secrets.VSCODE_PUBLISHER_TOKEN }}

      - name: Get the FTP Extension's package.json
        run: "echo ::set-output name=package::$(cat packages/zowe-explorer-ftp-extension/package.json)"
        id: get_ftp_name

      - name: Publish the FTP Extension for Zowe Explorer
        id: deploy_zowe_explorer_ftp_extension
        uses: ./.github/actions/deploy-vscode-extension
        with:
          name: ${{ fromJson(steps.get_ftp_name.outputs.package).displayName }}
          package: packages/zowe-explorer-ftp-extension
          token: ${{ secrets.VSCODE_PUBLISHER_TOKEN }}

      # - name: Publish the Zowe Explorer APIs
      #   id: deploy_zowe_explorer_api
      #   uses: ./.github/actions/deploy-zowe-explorer-api
      #   with:
      #     package: packages/zowe-explorer-api

      # - name: Publish the ESLint plugin for Zowe Explorer
      #   id: deploy_eslint_plugin_zowe_explorer
      #   uses: ./.github/actions/deploy-eslint-plugin-zowe-explorer
      #   with:
      #     package: packages/eslint-plugin-zowe-explorer

      - name: Get Top-Level package.json
        run: "echo ::set-output name=top_package::$(cat package.json)"
        id: get_version

      - name: Check if files were staged
        run: "echo ::set-output name=files_staged::$(git diff --cached --quiet || echo $?)"
        id: check_project

      # Each individual action should git-add the desired files
      - name: Update Project Files with new Version
        if: steps.check_project.outputs.files_staged == 1
        run: |
          git status
          git commit -m "Version Bumped to ${{ fromJson(steps.get_version.outputs.top_package).version }}"
          git push origin_token test-monorepo-deployment

      - name: Create the Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ fromJson(steps.get_version.outputs.top_package).version }}
          release_name: v${{ fromJson(steps.get_version.outputs.top_package).version }} - test
          body: |
            ${{ steps.deploy_zowe_explorer.outputs.changelog }}
            ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.changelog }}
          # body: |
          #   ${{ steps.deploy_zowe_explorer.outputs.changelog }}
          #   ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.changelog }}
          #   ${{ steps.deploy_zowe_explorer_api.outputs.changelog }}
          #   ${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.changelog }}
          draft: true
          prerelease: false

      - name: Upload the Zowe Explorer Assets
        if: ${{ steps.deploy_zowe_explorer.outputs.vsix != null }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.deploy_zowe_explorer.outputs.vsix }}
          asset_name: ${{ steps.deploy_zowe_explorer.outputs.vsix }}
          asset_content_type: application/octet-stream

      - name: Upload the FTP Extension for Zowe Explorer Assets
        if: ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.vsix != null }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/${{ steps.deploy_zowe_explorer_ftp_extension.outputs.vsix }}
          asset_name: ${{ steps.deploy_zowe_explorer_ftp_extension.outputs.vsix }}
          asset_content_type: application/octet-stream

      # - name: Upload the Zowe Explorer APIs Assets
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./dist/${{ steps.deploy_zowe_explorer_api.outputs.tgz }}
      #     asset_name: ${{ steps.deploy_zowe_explorer_api.outputs.tgz }}
      #     asset_content_type: application/octet-stream

      # - name: Upload the ESLint plugin for Zowe Explorer Assets
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./dist/${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.tgz }}
      #     asset_name: ${{ steps.deploy_eslint_plugin_zowe_explorer.outputs.tgz }}
      #     asset_content_type: application/octet-stream
